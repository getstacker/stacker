#!/bin/sh -e

: ${STACKER_HOME:=~/.stacker}
: ${STACKER_BIN:=/usr/local/bin/stacker}

NODE_VERSION=v1.2.0
NODE_BASE_URL=https://iojs.org/dist/${NODE_VERSION}/
NODE_DIR=${STACKER_HOME}/package/iojs/

NODE_CHECKSUM_darwin_x64=07fcc65f3c6e7ecd45f9139c67c5c904226247f6f9da57b88478153b8db21d63
NODE_CHECKSUM_linux_x64=bf475addb9e549f7005d61c13acdbefcf1e8e0fc60c73448c9baedc9795910fa
NODE_CHECKSUM_linux_x86=4d2d9a158fb4aff30dd3b7c354d084d95b7ba43fc3bb7dfd77284934e390ef85

STACKER_HOME_BIN=${STACKER_HOME}/package/stacker/stacker/bin/stacker


ask_permission() {
  printf "\nThis script will install stacker CLI and a self contained version of NodeJS.\n"
  printf "No path, ENV vars, or profile scripts will be modified. All files will be\n"
  printf "contained in the install directory execpt for a link to the stacker bin.\n"

  printf "\nInstall directory: \e[0;36m%s\e[0m\n" "${STACKER_HOME}"
  printf "Stacker bin: \e[0;36m%s\e[0m\n" "${STACKER_BIN}"

  if [ -f "${STACKER_HOME_BIN}" ]; then
    printf "\n\e[0;31m[WARNING]\e[0m %s already exists.\n" "${STACKER_BIN}"
    printf "Installing stacker will result in overwriting this file.\n"
  fi

  while true; do
    printf "\n\e[0;35mInstall stacker?\e[0m [Y/n] "
    read yn
    case $yn in
        [Yy]* ) return;;
        [Nn]* ) exit 0;;
        * ) return;;
    esac
  done
}

unsupported() {
  echo 'Sorry, your OS is not currently supported by the stacker install script.'
  echo 'Please add an issue https://github.com/getstacker/stacker/issues'
  exit 1
}

get_platform(){
  PLATFORM=$(uname | tr '[:upper:]' '[:lower:]')
  ARCH=$(uname -m)
  if [ "$(echo "${ARCH}" | cut -c5-6)" = "64" ]; then
    ARCH=x64
  elif [ "$(echo "${ARCH}" | cut -c1-3)" = "x86" ]; then
    ARCH=x86
  else
    unsupported
  fi
}

install_stacker() {
  local pkg_name; pkg_name=stacker
  local pkg_url; pkg_url="https://github.com/getstacker/${pkg_name}.git"
  local pkg_dir; pkg_dir="${STACKER_HOME}/package/stacker"
  printf "\n\e[0;36m[CLONING]\e[0m %s\n%s\n-> %s\n" "${pkg_name}" "${pkg_url}" "${pkg_dir}"
  mkdir -vp "${pkg_dir}"
  cd "${STACKER_HOME}/package/stacker"
  if test -d $pkg_name/.git; then
    git -C ./$pkg_name pull
  else
    git clone "${pkg_url}"
  fi
}

install_stacker_packages() {
  local pkg_dir; pkg_dir="${STACKER_HOME}/package/stacker/stacker"
  printf "\n\e[0;36m[INSTALLING]\e[0m stacker npm modules\n-> %s\n" "${pkg_dir}"
  cd "${pkg_dir}"
  "${NODE_DIR}"/node/bin/npm install
}

install_node() {
  local pkg_name; pkg_name="iojs-${NODE_VERSION}-${PLATFORM}-${ARCH}.tar.gz"
  local dir_name; dir_name=$(basename -s .tar.gz "${pkg_name}")
  local node_url; node_url=${NODE_BASE_URL}${pkg_name}
  local checksum;
  printf "\n\e[0;36m[DOWNLOADING]\e[0m Node io.js\n%s\n-> %s\n" "${node_url}" "${NODE_DIR}"
  mkdir -vp "${NODE_DIR}"
  cd "${NODE_DIR}"
  test -d "${dir_name}" && rm -rf "${dir_name}"
  test -e "${pkg_name}" && rm -f "${pkg_name}"
  curl -SLo "${pkg_name}" "${node_url}"
  printf "\n\e[0;36m[VERIFYING]\e[0m Node io.js\n"
  checksum=NODE_CHECKSUM_${PLATFORM}_${ARCH}
  echo "${!checksum}"
  if [ "$(shasum -b -a 256 "${pkg_name}" | cut -c1-64)" = "${!checksum}" ]; then
    printf "Verified!\n"
  else
    printf "\e[01;31m[ERROR]\e[0m Failed checksum\n\n"
    printf "Try again. Node io.js was not successfully downloaded.\n"
    exit 1
  fi
  tar -xzf "${pkg_name}"
  ln -sf "${dir_name}" node
  rm "${pkg_name}"
}

link_stacker() {
  printf "\n\e[0;36m[LINKING]\e[0m stacker CLI\n%s\n-> %s\n" "${STACKER_HOME_BIN}" "${STACKER_BIN}"
  ln -sf "${STACKER_HOME_BIN}" "${STACKER_BIN}"
  if [ "$(which stacker)" != "${STACKER_HOME_BIN}" ]; then
    printf "\n\e[0;31m[WARNING]\e[0m another program named stacker appears earlier in the path\n"
    printf "%s\n" "$(which stacker)"
  fi
}

main() {
  ask_permission
  get_platform
  install_stacker
  install_node
  install_stacker_packages
  link_stacker
  printf "\n\e[0;32m[SUCCESS]\e[0m installed stacker\n"
  printf "\n\e[0;36mUsage:\e[0m\n  stacker help\n\n"
}

main
